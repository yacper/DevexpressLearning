// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/security.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from Protos/security.proto</summary>
public static partial class SecurityReflection {

  #region Descriptor
  /// <summary>File descriptor for Protos/security.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static SecurityReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "ChVQcm90b3Mvc2VjdXJpdHkucHJvdG8aH2dvb2dsZS9wcm90b2J1Zi90aW1l",
          "c3RhbXAucHJvdG8imwUKCFNlY3VyaXR5EgoKAklEGAkgASgFEgwKBENvZGUY",
          "ASABKAkSDAoETmFtZRgCIAEoCRIPCgdDdXJyZW50GAMgASgBEgwKBE9wZW4Y",
          "BCABKAESDAoESGlnaBgFIAEoARILCgNMb3cYBiABKAESDQoFQ2xvc2UYByAB",
          "KAESLgoKVXBkYXRlVGltZRgKIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1l",
          "c3RhbXASDgoGVm9sdW1lGAsgASgBEhAKCFR1cm5PdmVyGAwgASgBEhQKDFR1",
          "cm5PdmVyUmF0ZRgNIAEoARITCgtWb2x1bWVUb3RhbBgOIAEoARIVCg1UdXJu",
          "T3ZlclRvdGFsGA8gASgBEg4KBkNoYW5nZRgQIAEoARIVCg1DaGFuZ2VQZXJj",
          "ZW50GBEgASgBEhgKEENoYW5nZVJhdGlvTGltaXQYEiABKAESFgoOSGlnaExp",
          "bWl0UHJpY2UYEyABKAESFQoNTG93TGltaXRQcmljZRgUIAEoARIRCglBbXBs",
          "aXR1ZGUYFSABKAESEAoIQXZnUHJpY2UYFiABKAESCwoDQXNrGBcgASgBEgsK",
          "A0JpZBgYIAEoARIOCgZTcHJlYWQYGSABKAESDgoGQXNrVm9sGBogASgBEg4K",
          "BkJpZFZvbBgbIAEoARITCgtCaWRBc2tSYXRpbxgcIAEoARITCgtWb2x1bWVS",
          "YXRpbxgdIAEoARIbChNIaWdoZXN0NTJXZWVrc1ByaWNlGB4gASgBEhoKEkxv",
          "d2VzdDUyV2Vla3NQcmljZRgfIAEoARIbChNIaWdoZXN0SGlzdG9yeVByaWNl",
          "GCAgASgBEhoKEkxvd2VzdEhpc3RvcnlQcmljZRghIAEoARIPCgdMb3RTaXpl",
          "GCIgASgBYgZwcm90bzM="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
        new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::Security), global::Security.Parser, new[]{ "ID", "Code", "Name", "Current", "Open", "High", "Low", "Close", "UpdateTime", "Volume", "TurnOver", "TurnOverRate", "VolumeTotal", "TurnOverTotal", "Change", "ChangePercent", "ChangeRatioLimit", "HighLimitPrice", "LowLimitPrice", "Amplitude", "AvgPrice", "Ask", "Bid", "Spread", "AskVol", "BidVol", "BidAskRatio", "VolumeRatio", "Highest52WeeksPrice", "Lowest52WeeksPrice", "HighestHistoryPrice", "LowestHistoryPrice", "LotSize" }, null, null, null, null)
        }));
  }
  #endregion

}
#region Messages
public sealed partial class Security : pb::IMessage<Security>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<Security> _parser = new pb::MessageParser<Security>(() => new Security());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Security> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SecurityReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Security() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Security(Security other) : this() {
    iD_ = other.iD_;
    code_ = other.code_;
    name_ = other.name_;
    current_ = other.current_;
    open_ = other.open_;
    high_ = other.high_;
    low_ = other.low_;
    close_ = other.close_;
    updateTime_ = other.updateTime_ != null ? other.updateTime_.Clone() : null;
    volume_ = other.volume_;
    turnOver_ = other.turnOver_;
    turnOverRate_ = other.turnOverRate_;
    volumeTotal_ = other.volumeTotal_;
    turnOverTotal_ = other.turnOverTotal_;
    change_ = other.change_;
    changePercent_ = other.changePercent_;
    changeRatioLimit_ = other.changeRatioLimit_;
    highLimitPrice_ = other.highLimitPrice_;
    lowLimitPrice_ = other.lowLimitPrice_;
    amplitude_ = other.amplitude_;
    avgPrice_ = other.avgPrice_;
    ask_ = other.ask_;
    bid_ = other.bid_;
    spread_ = other.spread_;
    askVol_ = other.askVol_;
    bidVol_ = other.bidVol_;
    bidAskRatio_ = other.bidAskRatio_;
    volumeRatio_ = other.volumeRatio_;
    highest52WeeksPrice_ = other.highest52WeeksPrice_;
    lowest52WeeksPrice_ = other.lowest52WeeksPrice_;
    highestHistoryPrice_ = other.highestHistoryPrice_;
    lowestHistoryPrice_ = other.lowestHistoryPrice_;
    lotSize_ = other.lotSize_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Security Clone() {
    return new Security(this);
  }

  /// <summary>Field number for the "ID" field.</summary>
  public const int IDFieldNumber = 9;
  private int iD_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ID {
    get { return iD_; }
    set {
      iD_ = value;
    }
  }

  /// <summary>Field number for the "Code" field.</summary>
  public const int CodeFieldNumber = 1;
  private string code_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Code {
    get { return code_; }
    set {
      code_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "Name" field.</summary>
  public const int NameFieldNumber = 2;
  private string name_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "Current" field.</summary>
  public const int CurrentFieldNumber = 3;
  private double current_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double Current {
    get { return current_; }
    set {
      current_ = value;
    }
  }

  /// <summary>Field number for the "Open" field.</summary>
  public const int OpenFieldNumber = 4;
  private double open_;
  /// <summary>
  /// 开盘
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double Open {
    get { return open_; }
    set {
      open_ = value;
    }
  }

  /// <summary>Field number for the "High" field.</summary>
  public const int HighFieldNumber = 5;
  private double high_;
  /// <summary>
  /// 最高
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double High {
    get { return high_; }
    set {
      high_ = value;
    }
  }

  /// <summary>Field number for the "Low" field.</summary>
  public const int LowFieldNumber = 6;
  private double low_;
  /// <summary>
  /// 最低
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double Low {
    get { return low_; }
    set {
      low_ = value;
    }
  }

  /// <summary>Field number for the "Close" field.</summary>
  public const int CloseFieldNumber = 7;
  private double close_;
  /// <summary>
  /// 最新
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double Close {
    get { return close_; }
    set {
      close_ = value;
    }
  }

  /// <summary>Field number for the "UpdateTime" field.</summary>
  public const int UpdateTimeFieldNumber = 10;
  private global::Google.Protobuf.WellKnownTypes.Timestamp updateTime_;
  /// <summary>
  /// 价格更新时间
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Google.Protobuf.WellKnownTypes.Timestamp UpdateTime {
    get { return updateTime_; }
    set {
      updateTime_ = value;
    }
  }

  /// <summary>Field number for the "Volume" field.</summary>
  public const int VolumeFieldNumber = 11;
  private double volume_;
  /// <summary>
  /// 成交量
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double Volume {
    get { return volume_; }
    set {
      volume_ = value;
    }
  }

  /// <summary>Field number for the "TurnOver" field.</summary>
  public const int TurnOverFieldNumber = 12;
  private double turnOver_;
  /// <summary>
  /// 成交额
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double TurnOver {
    get { return turnOver_; }
    set {
      turnOver_ = value;
    }
  }

  /// <summary>Field number for the "TurnOverRate" field.</summary>
  public const int TurnOverRateFieldNumber = 13;
  private double turnOverRate_;
  /// <summary>
  /// 换手率
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double TurnOverRate {
    get { return turnOverRate_; }
    set {
      turnOverRate_ = value;
    }
  }

  /// <summary>Field number for the "VolumeTotal" field.</summary>
  public const int VolumeTotalFieldNumber = 14;
  private double volumeTotal_;
  /// <summary>
  /// 日总成交量
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double VolumeTotal {
    get { return volumeTotal_; }
    set {
      volumeTotal_ = value;
    }
  }

  /// <summary>Field number for the "TurnOverTotal" field.</summary>
  public const int TurnOverTotalFieldNumber = 15;
  private double turnOverTotal_;
  /// <summary>
  /// 日总成交额
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double TurnOverTotal {
    get { return turnOverTotal_; }
    set {
      turnOverTotal_ = value;
    }
  }

  /// <summary>Field number for the "Change" field.</summary>
  public const int ChangeFieldNumber = 16;
  private double change_;
  /// <summary>
  /// 涨跌
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double Change {
    get { return change_; }
    set {
      change_ = value;
    }
  }

  /// <summary>Field number for the "ChangePercent" field.</summary>
  public const int ChangePercentFieldNumber = 17;
  private double changePercent_;
  /// <summary>
  /// 涨幅%
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double ChangePercent {
    get { return changePercent_; }
    set {
      changePercent_ = value;
    }
  }

  /// <summary>Field number for the "ChangeRatioLimit" field.</summary>
  public const int ChangeRatioLimitFieldNumber = 18;
  private double changeRatioLimit_;
  /// <summary>
  /// 涨跌停比例
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double ChangeRatioLimit {
    get { return changeRatioLimit_; }
    set {
      changeRatioLimit_ = value;
    }
  }

  /// <summary>Field number for the "HighLimitPrice" field.</summary>
  public const int HighLimitPriceFieldNumber = 19;
  private double highLimitPrice_;
  /// <summary>
  /// 涨停价
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double HighLimitPrice {
    get { return highLimitPrice_; }
    set {
      highLimitPrice_ = value;
    }
  }

  /// <summary>Field number for the "LowLimitPrice" field.</summary>
  public const int LowLimitPriceFieldNumber = 20;
  private double lowLimitPrice_;
  /// <summary>
  /// 跌停价
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double LowLimitPrice {
    get { return lowLimitPrice_; }
    set {
      lowLimitPrice_ = value;
    }
  }

  /// <summary>Field number for the "Amplitude" field.</summary>
  public const int AmplitudeFieldNumber = 21;
  private double amplitude_;
  /// <summary>
  /// 振幅%
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double Amplitude {
    get { return amplitude_; }
    set {
      amplitude_ = value;
    }
  }

  /// <summary>Field number for the "AvgPrice" field.</summary>
  public const int AvgPriceFieldNumber = 22;
  private double avgPrice_;
  /// <summary>
  /// 平均价
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double AvgPrice {
    get { return avgPrice_; }
    set {
      avgPrice_ = value;
    }
  }

  /// <summary>Field number for the "Ask" field.</summary>
  public const int AskFieldNumber = 23;
  private double ask_;
  /// <summary>
  /// 卖价
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double Ask {
    get { return ask_; }
    set {
      ask_ = value;
    }
  }

  /// <summary>Field number for the "Bid" field.</summary>
  public const int BidFieldNumber = 24;
  private double bid_;
  /// <summary>
  /// 买价
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double Bid {
    get { return bid_; }
    set {
      bid_ = value;
    }
  }

  /// <summary>Field number for the "Spread" field.</summary>
  public const int SpreadFieldNumber = 25;
  private double spread_;
  /// <summary>
  /// 价差
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double Spread {
    get { return spread_; }
    set {
      spread_ = value;
    }
  }

  /// <summary>Field number for the "AskVol" field.</summary>
  public const int AskVolFieldNumber = 26;
  private double askVol_;
  /// <summary>
  /// 卖量
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double AskVol {
    get { return askVol_; }
    set {
      askVol_ = value;
    }
  }

  /// <summary>Field number for the "BidVol" field.</summary>
  public const int BidVolFieldNumber = 27;
  private double bidVol_;
  /// <summary>
  /// 买量
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double BidVol {
    get { return bidVol_; }
    set {
      bidVol_ = value;
    }
  }

  /// <summary>Field number for the "BidAskRatio" field.</summary>
  public const int BidAskRatioFieldNumber = 28;
  private double bidAskRatio_;
  /// <summary>
  /// 委比（该字段为百分比字段，默认不展示%，如20实际对应20%，如20实际对应20%）
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double BidAskRatio {
    get { return bidAskRatio_; }
    set {
      bidAskRatio_ = value;
    }
  }

  /// <summary>Field number for the "VolumeRatio" field.</summary>
  public const int VolumeRatioFieldNumber = 29;
  private double volumeRatio_;
  /// <summary>
  /// 量比
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double VolumeRatio {
    get { return volumeRatio_; }
    set {
      volumeRatio_ = value;
    }
  }

  /// <summary>Field number for the "Highest52WeeksPrice" field.</summary>
  public const int Highest52WeeksPriceFieldNumber = 30;
  private double highest52WeeksPrice_;
  /// <summary>
  /// 52周最高价
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double Highest52WeeksPrice {
    get { return highest52WeeksPrice_; }
    set {
      highest52WeeksPrice_ = value;
    }
  }

  /// <summary>Field number for the "Lowest52WeeksPrice" field.</summary>
  public const int Lowest52WeeksPriceFieldNumber = 31;
  private double lowest52WeeksPrice_;
  /// <summary>
  /// 52周最低价
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double Lowest52WeeksPrice {
    get { return lowest52WeeksPrice_; }
    set {
      lowest52WeeksPrice_ = value;
    }
  }

  /// <summary>Field number for the "HighestHistoryPrice" field.</summary>
  public const int HighestHistoryPriceFieldNumber = 32;
  private double highestHistoryPrice_;
  /// <summary>
  /// 历史最高价
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double HighestHistoryPrice {
    get { return highestHistoryPrice_; }
    set {
      highestHistoryPrice_ = value;
    }
  }

  /// <summary>Field number for the "LowestHistoryPrice" field.</summary>
  public const int LowestHistoryPriceFieldNumber = 33;
  private double lowestHistoryPrice_;
  /// <summary>
  /// 历史最低价
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double LowestHistoryPrice {
    get { return lowestHistoryPrice_; }
    set {
      lowestHistoryPrice_ = value;
    }
  }

  /// <summary>Field number for the "LotSize" field.</summary>
  public const int LotSizeFieldNumber = 34;
  private double lotSize_;
  /// <summary>
  /// 每手数量  google.protobuf.Timestamp Birthday = 5;
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double LotSize {
    get { return lotSize_; }
    set {
      lotSize_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Security);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Security other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ID != other.ID) return false;
    if (Code != other.Code) return false;
    if (Name != other.Name) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Current, other.Current)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Open, other.Open)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(High, other.High)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Low, other.Low)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Close, other.Close)) return false;
    if (!object.Equals(UpdateTime, other.UpdateTime)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Volume, other.Volume)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TurnOver, other.TurnOver)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TurnOverRate, other.TurnOverRate)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(VolumeTotal, other.VolumeTotal)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TurnOverTotal, other.TurnOverTotal)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Change, other.Change)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ChangePercent, other.ChangePercent)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ChangeRatioLimit, other.ChangeRatioLimit)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(HighLimitPrice, other.HighLimitPrice)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(LowLimitPrice, other.LowLimitPrice)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Amplitude, other.Amplitude)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AvgPrice, other.AvgPrice)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Ask, other.Ask)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Bid, other.Bid)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Spread, other.Spread)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AskVol, other.AskVol)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(BidVol, other.BidVol)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(BidAskRatio, other.BidAskRatio)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(VolumeRatio, other.VolumeRatio)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Highest52WeeksPrice, other.Highest52WeeksPrice)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Lowest52WeeksPrice, other.Lowest52WeeksPrice)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(HighestHistoryPrice, other.HighestHistoryPrice)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(LowestHistoryPrice, other.LowestHistoryPrice)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(LotSize, other.LotSize)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ID != 0) hash ^= ID.GetHashCode();
    if (Code.Length != 0) hash ^= Code.GetHashCode();
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (Current != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Current);
    if (Open != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Open);
    if (High != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(High);
    if (Low != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Low);
    if (Close != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Close);
    if (updateTime_ != null) hash ^= UpdateTime.GetHashCode();
    if (Volume != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Volume);
    if (TurnOver != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TurnOver);
    if (TurnOverRate != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TurnOverRate);
    if (VolumeTotal != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(VolumeTotal);
    if (TurnOverTotal != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TurnOverTotal);
    if (Change != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Change);
    if (ChangePercent != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ChangePercent);
    if (ChangeRatioLimit != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ChangeRatioLimit);
    if (HighLimitPrice != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(HighLimitPrice);
    if (LowLimitPrice != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(LowLimitPrice);
    if (Amplitude != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Amplitude);
    if (AvgPrice != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AvgPrice);
    if (Ask != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Ask);
    if (Bid != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Bid);
    if (Spread != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Spread);
    if (AskVol != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AskVol);
    if (BidVol != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(BidVol);
    if (BidAskRatio != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(BidAskRatio);
    if (VolumeRatio != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(VolumeRatio);
    if (Highest52WeeksPrice != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Highest52WeeksPrice);
    if (Lowest52WeeksPrice != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Lowest52WeeksPrice);
    if (HighestHistoryPrice != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(HighestHistoryPrice);
    if (LowestHistoryPrice != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(LowestHistoryPrice);
    if (LotSize != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(LotSize);
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (Code.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Code);
    }
    if (Name.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Name);
    }
    if (Current != 0D) {
      output.WriteRawTag(25);
      output.WriteDouble(Current);
    }
    if (Open != 0D) {
      output.WriteRawTag(33);
      output.WriteDouble(Open);
    }
    if (High != 0D) {
      output.WriteRawTag(41);
      output.WriteDouble(High);
    }
    if (Low != 0D) {
      output.WriteRawTag(49);
      output.WriteDouble(Low);
    }
    if (Close != 0D) {
      output.WriteRawTag(57);
      output.WriteDouble(Close);
    }
    if (ID != 0) {
      output.WriteRawTag(72);
      output.WriteInt32(ID);
    }
    if (updateTime_ != null) {
      output.WriteRawTag(82);
      output.WriteMessage(UpdateTime);
    }
    if (Volume != 0D) {
      output.WriteRawTag(89);
      output.WriteDouble(Volume);
    }
    if (TurnOver != 0D) {
      output.WriteRawTag(97);
      output.WriteDouble(TurnOver);
    }
    if (TurnOverRate != 0D) {
      output.WriteRawTag(105);
      output.WriteDouble(TurnOverRate);
    }
    if (VolumeTotal != 0D) {
      output.WriteRawTag(113);
      output.WriteDouble(VolumeTotal);
    }
    if (TurnOverTotal != 0D) {
      output.WriteRawTag(121);
      output.WriteDouble(TurnOverTotal);
    }
    if (Change != 0D) {
      output.WriteRawTag(129, 1);
      output.WriteDouble(Change);
    }
    if (ChangePercent != 0D) {
      output.WriteRawTag(137, 1);
      output.WriteDouble(ChangePercent);
    }
    if (ChangeRatioLimit != 0D) {
      output.WriteRawTag(145, 1);
      output.WriteDouble(ChangeRatioLimit);
    }
    if (HighLimitPrice != 0D) {
      output.WriteRawTag(153, 1);
      output.WriteDouble(HighLimitPrice);
    }
    if (LowLimitPrice != 0D) {
      output.WriteRawTag(161, 1);
      output.WriteDouble(LowLimitPrice);
    }
    if (Amplitude != 0D) {
      output.WriteRawTag(169, 1);
      output.WriteDouble(Amplitude);
    }
    if (AvgPrice != 0D) {
      output.WriteRawTag(177, 1);
      output.WriteDouble(AvgPrice);
    }
    if (Ask != 0D) {
      output.WriteRawTag(185, 1);
      output.WriteDouble(Ask);
    }
    if (Bid != 0D) {
      output.WriteRawTag(193, 1);
      output.WriteDouble(Bid);
    }
    if (Spread != 0D) {
      output.WriteRawTag(201, 1);
      output.WriteDouble(Spread);
    }
    if (AskVol != 0D) {
      output.WriteRawTag(209, 1);
      output.WriteDouble(AskVol);
    }
    if (BidVol != 0D) {
      output.WriteRawTag(217, 1);
      output.WriteDouble(BidVol);
    }
    if (BidAskRatio != 0D) {
      output.WriteRawTag(225, 1);
      output.WriteDouble(BidAskRatio);
    }
    if (VolumeRatio != 0D) {
      output.WriteRawTag(233, 1);
      output.WriteDouble(VolumeRatio);
    }
    if (Highest52WeeksPrice != 0D) {
      output.WriteRawTag(241, 1);
      output.WriteDouble(Highest52WeeksPrice);
    }
    if (Lowest52WeeksPrice != 0D) {
      output.WriteRawTag(249, 1);
      output.WriteDouble(Lowest52WeeksPrice);
    }
    if (HighestHistoryPrice != 0D) {
      output.WriteRawTag(129, 2);
      output.WriteDouble(HighestHistoryPrice);
    }
    if (LowestHistoryPrice != 0D) {
      output.WriteRawTag(137, 2);
      output.WriteDouble(LowestHistoryPrice);
    }
    if (LotSize != 0D) {
      output.WriteRawTag(145, 2);
      output.WriteDouble(LotSize);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (Code.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Code);
    }
    if (Name.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Name);
    }
    if (Current != 0D) {
      output.WriteRawTag(25);
      output.WriteDouble(Current);
    }
    if (Open != 0D) {
      output.WriteRawTag(33);
      output.WriteDouble(Open);
    }
    if (High != 0D) {
      output.WriteRawTag(41);
      output.WriteDouble(High);
    }
    if (Low != 0D) {
      output.WriteRawTag(49);
      output.WriteDouble(Low);
    }
    if (Close != 0D) {
      output.WriteRawTag(57);
      output.WriteDouble(Close);
    }
    if (ID != 0) {
      output.WriteRawTag(72);
      output.WriteInt32(ID);
    }
    if (updateTime_ != null) {
      output.WriteRawTag(82);
      output.WriteMessage(UpdateTime);
    }
    if (Volume != 0D) {
      output.WriteRawTag(89);
      output.WriteDouble(Volume);
    }
    if (TurnOver != 0D) {
      output.WriteRawTag(97);
      output.WriteDouble(TurnOver);
    }
    if (TurnOverRate != 0D) {
      output.WriteRawTag(105);
      output.WriteDouble(TurnOverRate);
    }
    if (VolumeTotal != 0D) {
      output.WriteRawTag(113);
      output.WriteDouble(VolumeTotal);
    }
    if (TurnOverTotal != 0D) {
      output.WriteRawTag(121);
      output.WriteDouble(TurnOverTotal);
    }
    if (Change != 0D) {
      output.WriteRawTag(129, 1);
      output.WriteDouble(Change);
    }
    if (ChangePercent != 0D) {
      output.WriteRawTag(137, 1);
      output.WriteDouble(ChangePercent);
    }
    if (ChangeRatioLimit != 0D) {
      output.WriteRawTag(145, 1);
      output.WriteDouble(ChangeRatioLimit);
    }
    if (HighLimitPrice != 0D) {
      output.WriteRawTag(153, 1);
      output.WriteDouble(HighLimitPrice);
    }
    if (LowLimitPrice != 0D) {
      output.WriteRawTag(161, 1);
      output.WriteDouble(LowLimitPrice);
    }
    if (Amplitude != 0D) {
      output.WriteRawTag(169, 1);
      output.WriteDouble(Amplitude);
    }
    if (AvgPrice != 0D) {
      output.WriteRawTag(177, 1);
      output.WriteDouble(AvgPrice);
    }
    if (Ask != 0D) {
      output.WriteRawTag(185, 1);
      output.WriteDouble(Ask);
    }
    if (Bid != 0D) {
      output.WriteRawTag(193, 1);
      output.WriteDouble(Bid);
    }
    if (Spread != 0D) {
      output.WriteRawTag(201, 1);
      output.WriteDouble(Spread);
    }
    if (AskVol != 0D) {
      output.WriteRawTag(209, 1);
      output.WriteDouble(AskVol);
    }
    if (BidVol != 0D) {
      output.WriteRawTag(217, 1);
      output.WriteDouble(BidVol);
    }
    if (BidAskRatio != 0D) {
      output.WriteRawTag(225, 1);
      output.WriteDouble(BidAskRatio);
    }
    if (VolumeRatio != 0D) {
      output.WriteRawTag(233, 1);
      output.WriteDouble(VolumeRatio);
    }
    if (Highest52WeeksPrice != 0D) {
      output.WriteRawTag(241, 1);
      output.WriteDouble(Highest52WeeksPrice);
    }
    if (Lowest52WeeksPrice != 0D) {
      output.WriteRawTag(249, 1);
      output.WriteDouble(Lowest52WeeksPrice);
    }
    if (HighestHistoryPrice != 0D) {
      output.WriteRawTag(129, 2);
      output.WriteDouble(HighestHistoryPrice);
    }
    if (LowestHistoryPrice != 0D) {
      output.WriteRawTag(137, 2);
      output.WriteDouble(LowestHistoryPrice);
    }
    if (LotSize != 0D) {
      output.WriteRawTag(145, 2);
      output.WriteDouble(LotSize);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ID);
    }
    if (Code.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Code);
    }
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (Current != 0D) {
      size += 1 + 8;
    }
    if (Open != 0D) {
      size += 1 + 8;
    }
    if (High != 0D) {
      size += 1 + 8;
    }
    if (Low != 0D) {
      size += 1 + 8;
    }
    if (Close != 0D) {
      size += 1 + 8;
    }
    if (updateTime_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdateTime);
    }
    if (Volume != 0D) {
      size += 1 + 8;
    }
    if (TurnOver != 0D) {
      size += 1 + 8;
    }
    if (TurnOverRate != 0D) {
      size += 1 + 8;
    }
    if (VolumeTotal != 0D) {
      size += 1 + 8;
    }
    if (TurnOverTotal != 0D) {
      size += 1 + 8;
    }
    if (Change != 0D) {
      size += 2 + 8;
    }
    if (ChangePercent != 0D) {
      size += 2 + 8;
    }
    if (ChangeRatioLimit != 0D) {
      size += 2 + 8;
    }
    if (HighLimitPrice != 0D) {
      size += 2 + 8;
    }
    if (LowLimitPrice != 0D) {
      size += 2 + 8;
    }
    if (Amplitude != 0D) {
      size += 2 + 8;
    }
    if (AvgPrice != 0D) {
      size += 2 + 8;
    }
    if (Ask != 0D) {
      size += 2 + 8;
    }
    if (Bid != 0D) {
      size += 2 + 8;
    }
    if (Spread != 0D) {
      size += 2 + 8;
    }
    if (AskVol != 0D) {
      size += 2 + 8;
    }
    if (BidVol != 0D) {
      size += 2 + 8;
    }
    if (BidAskRatio != 0D) {
      size += 2 + 8;
    }
    if (VolumeRatio != 0D) {
      size += 2 + 8;
    }
    if (Highest52WeeksPrice != 0D) {
      size += 2 + 8;
    }
    if (Lowest52WeeksPrice != 0D) {
      size += 2 + 8;
    }
    if (HighestHistoryPrice != 0D) {
      size += 2 + 8;
    }
    if (LowestHistoryPrice != 0D) {
      size += 2 + 8;
    }
    if (LotSize != 0D) {
      size += 2 + 8;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Security other) {
    if (other == null) {
      return;
    }
    if (other.ID != 0) {
      ID = other.ID;
    }
    if (other.Code.Length != 0) {
      Code = other.Code;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    if (other.Current != 0D) {
      Current = other.Current;
    }
    if (other.Open != 0D) {
      Open = other.Open;
    }
    if (other.High != 0D) {
      High = other.High;
    }
    if (other.Low != 0D) {
      Low = other.Low;
    }
    if (other.Close != 0D) {
      Close = other.Close;
    }
    if (other.updateTime_ != null) {
      if (updateTime_ == null) {
        UpdateTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
      }
      UpdateTime.MergeFrom(other.UpdateTime);
    }
    if (other.Volume != 0D) {
      Volume = other.Volume;
    }
    if (other.TurnOver != 0D) {
      TurnOver = other.TurnOver;
    }
    if (other.TurnOverRate != 0D) {
      TurnOverRate = other.TurnOverRate;
    }
    if (other.VolumeTotal != 0D) {
      VolumeTotal = other.VolumeTotal;
    }
    if (other.TurnOverTotal != 0D) {
      TurnOverTotal = other.TurnOverTotal;
    }
    if (other.Change != 0D) {
      Change = other.Change;
    }
    if (other.ChangePercent != 0D) {
      ChangePercent = other.ChangePercent;
    }
    if (other.ChangeRatioLimit != 0D) {
      ChangeRatioLimit = other.ChangeRatioLimit;
    }
    if (other.HighLimitPrice != 0D) {
      HighLimitPrice = other.HighLimitPrice;
    }
    if (other.LowLimitPrice != 0D) {
      LowLimitPrice = other.LowLimitPrice;
    }
    if (other.Amplitude != 0D) {
      Amplitude = other.Amplitude;
    }
    if (other.AvgPrice != 0D) {
      AvgPrice = other.AvgPrice;
    }
    if (other.Ask != 0D) {
      Ask = other.Ask;
    }
    if (other.Bid != 0D) {
      Bid = other.Bid;
    }
    if (other.Spread != 0D) {
      Spread = other.Spread;
    }
    if (other.AskVol != 0D) {
      AskVol = other.AskVol;
    }
    if (other.BidVol != 0D) {
      BidVol = other.BidVol;
    }
    if (other.BidAskRatio != 0D) {
      BidAskRatio = other.BidAskRatio;
    }
    if (other.VolumeRatio != 0D) {
      VolumeRatio = other.VolumeRatio;
    }
    if (other.Highest52WeeksPrice != 0D) {
      Highest52WeeksPrice = other.Highest52WeeksPrice;
    }
    if (other.Lowest52WeeksPrice != 0D) {
      Lowest52WeeksPrice = other.Lowest52WeeksPrice;
    }
    if (other.HighestHistoryPrice != 0D) {
      HighestHistoryPrice = other.HighestHistoryPrice;
    }
    if (other.LowestHistoryPrice != 0D) {
      LowestHistoryPrice = other.LowestHistoryPrice;
    }
    if (other.LotSize != 0D) {
      LotSize = other.LotSize;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Code = input.ReadString();
          break;
        }
        case 18: {
          Name = input.ReadString();
          break;
        }
        case 25: {
          Current = input.ReadDouble();
          break;
        }
        case 33: {
          Open = input.ReadDouble();
          break;
        }
        case 41: {
          High = input.ReadDouble();
          break;
        }
        case 49: {
          Low = input.ReadDouble();
          break;
        }
        case 57: {
          Close = input.ReadDouble();
          break;
        }
        case 72: {
          ID = input.ReadInt32();
          break;
        }
        case 82: {
          if (updateTime_ == null) {
            UpdateTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
          }
          input.ReadMessage(UpdateTime);
          break;
        }
        case 89: {
          Volume = input.ReadDouble();
          break;
        }
        case 97: {
          TurnOver = input.ReadDouble();
          break;
        }
        case 105: {
          TurnOverRate = input.ReadDouble();
          break;
        }
        case 113: {
          VolumeTotal = input.ReadDouble();
          break;
        }
        case 121: {
          TurnOverTotal = input.ReadDouble();
          break;
        }
        case 129: {
          Change = input.ReadDouble();
          break;
        }
        case 137: {
          ChangePercent = input.ReadDouble();
          break;
        }
        case 145: {
          ChangeRatioLimit = input.ReadDouble();
          break;
        }
        case 153: {
          HighLimitPrice = input.ReadDouble();
          break;
        }
        case 161: {
          LowLimitPrice = input.ReadDouble();
          break;
        }
        case 169: {
          Amplitude = input.ReadDouble();
          break;
        }
        case 177: {
          AvgPrice = input.ReadDouble();
          break;
        }
        case 185: {
          Ask = input.ReadDouble();
          break;
        }
        case 193: {
          Bid = input.ReadDouble();
          break;
        }
        case 201: {
          Spread = input.ReadDouble();
          break;
        }
        case 209: {
          AskVol = input.ReadDouble();
          break;
        }
        case 217: {
          BidVol = input.ReadDouble();
          break;
        }
        case 225: {
          BidAskRatio = input.ReadDouble();
          break;
        }
        case 233: {
          VolumeRatio = input.ReadDouble();
          break;
        }
        case 241: {
          Highest52WeeksPrice = input.ReadDouble();
          break;
        }
        case 249: {
          Lowest52WeeksPrice = input.ReadDouble();
          break;
        }
        case 257: {
          HighestHistoryPrice = input.ReadDouble();
          break;
        }
        case 265: {
          LowestHistoryPrice = input.ReadDouble();
          break;
        }
        case 273: {
          LotSize = input.ReadDouble();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          Code = input.ReadString();
          break;
        }
        case 18: {
          Name = input.ReadString();
          break;
        }
        case 25: {
          Current = input.ReadDouble();
          break;
        }
        case 33: {
          Open = input.ReadDouble();
          break;
        }
        case 41: {
          High = input.ReadDouble();
          break;
        }
        case 49: {
          Low = input.ReadDouble();
          break;
        }
        case 57: {
          Close = input.ReadDouble();
          break;
        }
        case 72: {
          ID = input.ReadInt32();
          break;
        }
        case 82: {
          if (updateTime_ == null) {
            UpdateTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
          }
          input.ReadMessage(UpdateTime);
          break;
        }
        case 89: {
          Volume = input.ReadDouble();
          break;
        }
        case 97: {
          TurnOver = input.ReadDouble();
          break;
        }
        case 105: {
          TurnOverRate = input.ReadDouble();
          break;
        }
        case 113: {
          VolumeTotal = input.ReadDouble();
          break;
        }
        case 121: {
          TurnOverTotal = input.ReadDouble();
          break;
        }
        case 129: {
          Change = input.ReadDouble();
          break;
        }
        case 137: {
          ChangePercent = input.ReadDouble();
          break;
        }
        case 145: {
          ChangeRatioLimit = input.ReadDouble();
          break;
        }
        case 153: {
          HighLimitPrice = input.ReadDouble();
          break;
        }
        case 161: {
          LowLimitPrice = input.ReadDouble();
          break;
        }
        case 169: {
          Amplitude = input.ReadDouble();
          break;
        }
        case 177: {
          AvgPrice = input.ReadDouble();
          break;
        }
        case 185: {
          Ask = input.ReadDouble();
          break;
        }
        case 193: {
          Bid = input.ReadDouble();
          break;
        }
        case 201: {
          Spread = input.ReadDouble();
          break;
        }
        case 209: {
          AskVol = input.ReadDouble();
          break;
        }
        case 217: {
          BidVol = input.ReadDouble();
          break;
        }
        case 225: {
          BidAskRatio = input.ReadDouble();
          break;
        }
        case 233: {
          VolumeRatio = input.ReadDouble();
          break;
        }
        case 241: {
          Highest52WeeksPrice = input.ReadDouble();
          break;
        }
        case 249: {
          Lowest52WeeksPrice = input.ReadDouble();
          break;
        }
        case 257: {
          HighestHistoryPrice = input.ReadDouble();
          break;
        }
        case 265: {
          LowestHistoryPrice = input.ReadDouble();
          break;
        }
        case 273: {
          LotSize = input.ReadDouble();
          break;
        }
      }
    }
  }
  #endif

}

#endregion


#endregion Designer generated code
